// Generated by view binder compiler. Do not edit!
package it.omarkiarafederico.skitracker.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import it.omarkiarafederico.skitracker.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class TracciamentoItemBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView tracciamentoAverageSpeedIndicator;

  @NonNull
  public final TextView tracciamentoDislivelloIndicator;

  @NonNull
  public final TextView tracciamentoDurationIndicator;

  @NonNull
  public final TextView tracciamentoPistaDifficulty;

  @NonNull
  public final TextView tracciamentoPistaName;

  @NonNull
  public final TextView trackAverageSpeed;

  @NonNull
  public final TextView trackDateTime;

  @NonNull
  public final TextView trackDistanceIndicator;

  @NonNull
  public final TextView trackDuration;

  @NonNull
  public final TextView trackingDislivello;

  @NonNull
  public final TextView trackingDistance;

  private TracciamentoItemBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView tracciamentoAverageSpeedIndicator,
      @NonNull TextView tracciamentoDislivelloIndicator,
      @NonNull TextView tracciamentoDurationIndicator,
      @NonNull TextView tracciamentoPistaDifficulty, @NonNull TextView tracciamentoPistaName,
      @NonNull TextView trackAverageSpeed, @NonNull TextView trackDateTime,
      @NonNull TextView trackDistanceIndicator, @NonNull TextView trackDuration,
      @NonNull TextView trackingDislivello, @NonNull TextView trackingDistance) {
    this.rootView = rootView;
    this.tracciamentoAverageSpeedIndicator = tracciamentoAverageSpeedIndicator;
    this.tracciamentoDislivelloIndicator = tracciamentoDislivelloIndicator;
    this.tracciamentoDurationIndicator = tracciamentoDurationIndicator;
    this.tracciamentoPistaDifficulty = tracciamentoPistaDifficulty;
    this.tracciamentoPistaName = tracciamentoPistaName;
    this.trackAverageSpeed = trackAverageSpeed;
    this.trackDateTime = trackDateTime;
    this.trackDistanceIndicator = trackDistanceIndicator;
    this.trackDuration = trackDuration;
    this.trackingDislivello = trackingDislivello;
    this.trackingDistance = trackingDistance;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static TracciamentoItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static TracciamentoItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.tracciamento_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static TracciamentoItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.tracciamentoAverageSpeedIndicator;
      TextView tracciamentoAverageSpeedIndicator = ViewBindings.findChildViewById(rootView, id);
      if (tracciamentoAverageSpeedIndicator == null) {
        break missingId;
      }

      id = R.id.tracciamentoDislivelloIndicator;
      TextView tracciamentoDislivelloIndicator = ViewBindings.findChildViewById(rootView, id);
      if (tracciamentoDislivelloIndicator == null) {
        break missingId;
      }

      id = R.id.tracciamentoDurationIndicator;
      TextView tracciamentoDurationIndicator = ViewBindings.findChildViewById(rootView, id);
      if (tracciamentoDurationIndicator == null) {
        break missingId;
      }

      id = R.id.tracciamentoPistaDifficulty;
      TextView tracciamentoPistaDifficulty = ViewBindings.findChildViewById(rootView, id);
      if (tracciamentoPistaDifficulty == null) {
        break missingId;
      }

      id = R.id.tracciamentoPistaName;
      TextView tracciamentoPistaName = ViewBindings.findChildViewById(rootView, id);
      if (tracciamentoPistaName == null) {
        break missingId;
      }

      id = R.id.trackAverageSpeed;
      TextView trackAverageSpeed = ViewBindings.findChildViewById(rootView, id);
      if (trackAverageSpeed == null) {
        break missingId;
      }

      id = R.id.trackDateTime;
      TextView trackDateTime = ViewBindings.findChildViewById(rootView, id);
      if (trackDateTime == null) {
        break missingId;
      }

      id = R.id.trackDistanceIndicator;
      TextView trackDistanceIndicator = ViewBindings.findChildViewById(rootView, id);
      if (trackDistanceIndicator == null) {
        break missingId;
      }

      id = R.id.trackDuration;
      TextView trackDuration = ViewBindings.findChildViewById(rootView, id);
      if (trackDuration == null) {
        break missingId;
      }

      id = R.id.trackingDislivello;
      TextView trackingDislivello = ViewBindings.findChildViewById(rootView, id);
      if (trackingDislivello == null) {
        break missingId;
      }

      id = R.id.trackingDistance;
      TextView trackingDistance = ViewBindings.findChildViewById(rootView, id);
      if (trackingDistance == null) {
        break missingId;
      }

      return new TracciamentoItemBinding((ConstraintLayout) rootView,
          tracciamentoAverageSpeedIndicator, tracciamentoDislivelloIndicator,
          tracciamentoDurationIndicator, tracciamentoPistaDifficulty, tracciamentoPistaName,
          trackAverageSpeed, trackDateTime, trackDistanceIndicator, trackDuration,
          trackingDislivello, trackingDistance);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
